# app/notification/scheduler.py
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz, logging
from app.notification.email_service import send_email

BANGKOK_TZ = pytz.timezone("Asia/Bangkok")


def process_user(user, date_local):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á user ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•"""
    from app.routes.api.study import get_daily_summary 
    try:
        summary = get_daily_summary(user.id, date_local)
        if summary["total_hours"] == 0:
            return False

        # ‚úÖ HTML Template
        body_html = f"""
        <html>
          <body style="font-family: Arial, sans-serif; color: #333;">
            <h2 style="color:#2c3e50;">üìö ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_local}</h2>
            <p><b>‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô:</b> {summary['total_hours']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; margin-top:10px;">
              <tr style="background-color:#f2f2f2;">
                <th>‡∏ß‡∏¥‡∏ä‡∏≤</th>
                <th>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</th>
              </tr>
              {''.join(f"<tr><td>{s['name']}</td><td>{s['hours']}</td></tr>" for s in summary['subjects'])}
            </table>
            <p style="margin-top:20px;">
                üëâ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà 
                <a href="https://study-planner-gv2l.onrender.com" 
                    style="color:#1a73e8; text-decoration:none;">
                    ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                </a>
            </p>
            <p style="margin-top:20px;">‡∏™‡∏π‡πâ ‡πÜ ‡∏ô‡∏∞ {user.username} ‚ú®</p>
          </body>
        </html>
        """

        send_email(user.email, "‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", body_html)
        return True
    except Exception as e:
        logging.error(f"Error processing user {getattr(user, 'id', '?')}: {e}")
        return False


def batch_job():
    """‡∏î‡∏∂‡∏á users ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î email_notifications ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"""
    from app.models import User  # üëà import ‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular import

    now_th = datetime.now(BANGKOK_TZ).date()
    users = User.query.filter_by(email_notifications=True).all()

    for u in users:
        process_user(u, now_th)


def start_scheduler():
    """‡πÄ‡∏£‡∏¥‡πà‡∏° APScheduler ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô batch_job ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 00:01 (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)"""
    scheduler = BackgroundScheduler(timezone="Asia/Bangkok")
    scheduler.add_job(batch_job, "cron", hour=0, minute=1)
    scheduler.start()